const Embed = require("../functions/embed")

module.exports = {
    config: {
        name: "help",
        available: true,
        cooldown: 5000,
        permissions: [],
        aliases: []
    },
    run: async (client, message, args, db) => {
        if (args[0] && client.commands.filter(c => c.config.available !== "Owner").get(args[0].toLowerCase()) || client.commands.filter(c => c.config.available !== "Owner").find(c => c.config.aliases.includes(args[0].toLowerCase()))) {
            const command = client.commands.get(args[0].toLowerCase()) || client.commands.find(c => c.config.aliases.includes(args[0].toLowerCase()));
            if (!command) return

            let usage = '';
            if (command.config.usage) {
                usage = client.translate.get(db.language, `Commands.${command.config.name}.usage`);
            }

            const embed = new Embed()
                .setDescription(`### ${client.translate.get(db.language, 'Commands.help.embeds.first.cmdName')}: ${command.config.name}\n\n**${client.translate.get(db.language, 'Commands.help.embeds.first.cmdDesc')}**: ${client.translate.get(db.language, `Commands.${command.config.name}.description`)}\n**${client.translate.get(db.language, 'Commands.help.embeds.first.cmdAvail')}**: ${command.config.available ? `${client.translate.get(db.language, 'Commands.help.embeds.first.cmdAvail2')}` : `${client.translate.get(db.language, 'Commands.help.embeds.first.cmdAvail3')}`}\n**${client.translate.get(db.language, 'Commands.help.embeds.first.cmdCool')}**: ${command.config.cooldown / 1000} ${client.translate.get(db.language, 'Commands.help.embeds.first.cmdCool2')}\n**${client.translate.get(db.language, 'Commands.help.embeds.first.cmdPerms')}**: ${command.config.permissions.length > 0 ? command.config.permissions.map(p => p).join(", ") : `${client.translate.get(db.language, 'Commands.help.embeds.first.cmdPerms2')}`}${command.config.aliases.length > 0 ? `\n**${client.translate.get(db.language, 'Commands.help.embeds.first.cmdAlias')}**: ${command.config.aliases.map(a => `\`${a}\``).join(", ")}` : ''}\n\n**${client.translate.get(db.language, 'Commands.help.embeds.first.cmdUsage')}**:\`${client.config.prefix}${command.config.name} ${usage}\``)
                .setColor(`#A52F05`);

            return message.channel.sendMessage({ embeds: [embed] });
        } else {
            const get_bigrams = function (string) {
                const s = string.toLowerCase();
                const v = new Array(s.length - 1);
                for (let i = 0, end = v.length; i <= end; i++) {
                    v[i] = s.slice(i, i + 2);
                }
                return v;
            };

            const string_similarity = function (str1, str2) {
                if ((str1.length > 0) && (str2.length > 0)) {
                    const pairs1 = get_bigrams(str1);
                    const pairs2 = get_bigrams(str2);
                    const union = pairs1.length + pairs2.length;
                    let hit_count = 0;
                    for (let x of Array.from(pairs1)) {
                        for (let y of Array.from(pairs2)) {
                            if (x === y) {
                                hit_count++;
                            }
                        }
                    }
                    if (hit_count > 0) {
                        return ((2.0 * hit_count) / union);
                    }
                }
                return 0.0;
            };


            let names;
            const query = args[0];
            names = client.commands.filter(x => x.config?.available !== "Owner").map(x => x.config.name)

            let results = [];
            for (let name of names) {
                const relevance = string_similarity(query, name);
                const obj = { name, relevance };
                results.push(obj);
            }

            if (!results.find(e => e.relevance > 0)) {
                const embed = new Embed()
                    .setDescription(`### ${client.translate.get(db.language, 'Commands.help.embeds.second.start')}\n${client.commands.filter(c => c.config.available && c.config.available !== "Owner").map(c => `\`${c.config.name}\``).join(", ")}${client.commands.filter(c => c.config.available === false).size > 0 ? `\n### ${client.translate.get(db.language, 'Commands.help.embeds.second.middle')}\n${client.commands.filter(c => c.config.available === false).map(c => `\`${c.config.name}\``).join(", ")}` : ""}\n\n##### ${client.translate.get(db.language, 'Commands.help.embeds.second.end')} \`${client.config.prefix}help [${client.translate.get(db.language, 'Commands.help.embeds.second.end2')}]\``)
                    .setColor(`#A52F05`);

                return message.channel.sendMessage({ embeds: [embed] })
            }

            results.sort((a, b) => b.relevance - a.relevance).slice(0, 3).map(x => x.name)

            const cmd = client.commands.get(results.sort((a, b) => b.relevance - a.relevance)[0].name)
            return message.reply({ embeds: [new Embed().setDescription(`### ${client.translate.get(db.language, "Commands.help.relevant")}\n${cmd.config.name}`).setColor(`#A52F05`)] }, false)
        }
    },
};
